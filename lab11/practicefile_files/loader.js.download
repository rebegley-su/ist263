!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=70)}({1:function(e,t,r){"use strict";function n(){return(n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}r.d(t,"a",(function(){return n}))},10:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ELEMENT_READJUSTMENT_WAIT_TIME=t.SPINNER_REMOVAL_WAIT_TIME=t.IMPORT_BUTTON_ID=t.CANCEL_BUTTON_ID=t.FOOTER_ID=t.UPPY_CONTAINER_ID=t.CLOSE_BUTTON_ID=t.HEADER_ID=t.SPINNER_FADE_OUT_CLASS=t.SPINNER_CONTAINER_ID=t.MessageStatus=void 0,function(e){e.cancel="cancel",e.success="success",e.logout="logout",e.open="open",e.options="options"}(t.MessageStatus||(t.MessageStatus={})),t.SPINNER_CONTAINER_ID="spinner-container",t.SPINNER_FADE_OUT_CLASS="fade-out",t.HEADER_ID="header",t.CLOSE_BUTTON_ID="close-button",t.UPPY_CONTAINER_ID="uppy-container",t.FOOTER_ID="buttonscontainer",t.CANCEL_BUTTON_ID="cancel",t.IMPORT_BUTTON_ID="startUpload",t.SPINNER_REMOVAL_WAIT_TIME=600,t.ELEMENT_READJUSTMENT_WAIT_TIME=100},4:function(e,t,r){"use strict";t.a=function(e,t){}},5:function(e,t,r){"use strict";r.r(t);var n=r(1),i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s="object"===("undefined"==typeof window?"undefined":i(window))&&"object"===("undefined"==typeof document?"undefined":i(document))&&9===document.nodeType,o=r(4);function a(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function u(e,t,r){return t&&a(e.prototype,t),r&&a(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function l(e,t){return(l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function c(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,l(e,t)}function h(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}r.d(t,"RuleList",(function(){return X})),r.d(t,"SheetsManager",(function(){return Se})),r.d(t,"SheetsRegistry",(function(){return ee})),r.d(t,"create",(function(){return be})),r.d(t,"createGenerateId",(function(){return se})),r.d(t,"createRule",(function(){return p})),r.d(t,"getDynamicStyles",(function(){return xe})),r.d(t,"hasCSSTOMSupport",(function(){return Re})),r.d(t,"sheets",(function(){return te})),r.d(t,"toCssValue",(function(){return v}));var d={}.constructor;function f(e){if(null==e||"object"!=typeof e)return e;if(Array.isArray(e))return e.map(f);if(e.constructor!==d)return e;var t={};for(var r in e)t[r]=f(e[r]);return t}function p(e,t,r){void 0===e&&(e="unnamed");var n=r.jss,i=f(t),s=n.plugins.onCreateRule(e,i,r);return s||(e[0],null)}var y=function(e,t){for(var r="",n=0;n<e.length&&"!important"!==e[n];n++)r&&(r+=t),r+=e[n];return r},v=function(e){if(!Array.isArray(e))return e;var t="";if(Array.isArray(e[0]))for(var r=0;r<e.length&&"!important"!==e[r];r++)t&&(t+=", "),t+=y(e[r]," ");else t=y(e,", ");return"!important"===e[e.length-1]&&(t+=" !important"),t};function g(e){return e&&!1===e.format?{linebreak:"",space:""}:{linebreak:"\n",space:" "}}function m(e,t){for(var r="",n=0;n<t;n++)r+="  ";return r+e}function b(e,t,r){void 0===r&&(r={});var n="";if(!t)return n;var i=r.indent,s=void 0===i?0:i,o=t.fallbacks;!1===r.format&&(s=-1/0);var a=g(r),u=a.linebreak,l=a.space;if(e&&s++,o)if(Array.isArray(o))for(var c=0;c<o.length;c++){var h=o[c];for(var d in h){var f=h[d];null!=f&&(n&&(n+=u),n+=m(d+":"+l+v(f)+";",s))}}else for(var p in o){var y=o[p];null!=y&&(n&&(n+=u),n+=m(p+":"+l+v(y)+";",s))}for(var b in t){var S=t[b];null!=S&&"fallbacks"!==b&&(n&&(n+=u),n+=m(b+":"+l+v(S)+";",s))}return(n||r.allowEmpty)&&e?(n&&(n=""+u+n+u),m(""+e+l+"{"+n,--s)+m("}",s)):n}var S=/([[\].#*$><+~=|^:(),"'`\s])/g,R="undefined"!=typeof CSS&&CSS.escape,x=function(e){return R?R(e):e.replace(S,"\\$1")},k=function(){function e(e,t,r){this.type="style",this.isProcessed=!1;var n=r.sheet,i=r.Renderer;this.key=e,this.options=r,this.style=t,n?this.renderer=n.renderer:i&&(this.renderer=new i)}return e.prototype.prop=function(e,t,r){if(void 0===t)return this.style[e];var n=!!r&&r.force;if(!n&&this.style[e]===t)return this;var i=t;r&&!1===r.process||(i=this.options.jss.plugins.onChangeValue(t,e,this));var s=null==i||!1===i,o=e in this.style;if(s&&!o&&!n)return this;var a=s&&o;if(a?delete this.style[e]:this.style[e]=i,this.renderable&&this.renderer)return a?this.renderer.removeProperty(this.renderable,e):this.renderer.setProperty(this.renderable,e,i),this;var u=this.options.sheet;return u&&u.attached,this},e}(),O=function(e){function t(t,r,n){var i;i=e.call(this,t,r,n)||this;var s=n.selector,o=n.scoped,a=n.sheet,u=n.generateId;return s?i.selectorText=s:!1!==o&&(i.id=u(h(h(i)),a),i.selectorText="."+x(i.id)),i}c(t,e);var r=t.prototype;return r.applyTo=function(e){var t=this.renderer;if(t){var r=this.toJSON();for(var n in r)t.setProperty(e,n,r[n])}return this},r.toJSON=function(){var e={};for(var t in this.style){var r=this.style[t];"object"!=typeof r?e[t]=r:Array.isArray(r)&&(e[t]=v(r))}return e},r.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?Object(n.a)({},e,{allowEmpty:!0}):e;return b(this.selectorText,this.style,r)},u(t,[{key:"selector",set:function(e){if(e!==this.selectorText){this.selectorText=e;var t=this.renderer,r=this.renderable;if(r&&t)t.setSelector(r,e)||t.replaceRule(r,this)}},get:function(){return this.selectorText}}]),t}(k),P={onCreateRule:function(e,t,r){return"@"===e[0]||r.parent&&"keyframes"===r.parent.type?null:new O(e,t,r)}},w={indent:1,children:!0},_=/@([\w-]+)/,I=function(){function e(e,t,r){this.type="conditional",this.isProcessed=!1,this.key=e;var i=e.match(_);for(var s in this.at=i?i[1]:"unknown",this.query=r.name||"@"+this.at,this.options=r,this.rules=new X(Object(n.a)({},r,{parent:this})),t)this.rules.add(s,t[s]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.indexOf=function(e){return this.rules.indexOf(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n?(this.options.jss.plugins.onProcessRule(n),n):null},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.toString=function(e){void 0===e&&(e=w);var t=g(e).linebreak;if(null==e.indent&&(e.indent=w.indent),null==e.children&&(e.children=w.children),!1===e.children)return this.query+" {}";var r=this.rules.toString(e);return r?this.query+" {"+t+r+t+"}":""},e}(),j=/@media|@supports\s+/,E={onCreateRule:function(e,t,r){return j.test(e)?new I(e,t,r):null}},T={indent:1,children:!0},A=/@keyframes\s+([\w-]+)/,C=function(){function e(e,t,r){this.type="keyframes",this.at="@keyframes",this.isProcessed=!1;var i=e.match(A);i&&i[1]?this.name=i[1]:this.name="noname",this.key=this.type+"-"+this.name,this.options=r;var s=r.scoped,o=r.sheet,a=r.generateId;for(var u in this.id=!1===s?this.name:x(a(this,o)),this.rules=new X(Object(n.a)({},r,{parent:this})),t)this.rules.add(u,t[u],Object(n.a)({},r,{parent:this}));this.rules.process()}return e.prototype.toString=function(e){void 0===e&&(e=T);var t=g(e).linebreak;if(null==e.indent&&(e.indent=T.indent),null==e.children&&(e.children=T.children),!1===e.children)return this.at+" "+this.id+" {}";var r=this.rules.toString(e);return r&&(r=""+t+r+t),this.at+" "+this.id+" {"+r+"}"},e}(),N=/@keyframes\s+/,M=/\$([\w-]+)/g,U=function(e,t){return"string"==typeof e?e.replace(M,(function(e,r){return r in t?t[r]:e})):e},L=function(e,t,r){var n=e[t],i=U(n,r);i!==n&&(e[t]=i)},D={onCreateRule:function(e,t,r){return"string"==typeof e&&N.test(e)?new C(e,t,r):null},onProcessStyle:function(e,t,r){return"style"===t.type&&r?("animation-name"in e&&L(e,"animation-name",r.keyframes),"animation"in e&&L(e,"animation",r.keyframes),e):e},onChangeValue:function(e,t,r){var n=r.options.sheet;if(!n)return e;switch(t){case"animation":case"animation-name":return U(e,n.keyframes);default:return e}}},q=function(e){function t(){return e.apply(this,arguments)||this}return c(t,e),t.prototype.toString=function(e){var t=this.options.sheet,r=!!t&&t.options.link?Object(n.a)({},e,{allowEmpty:!0}):e;return b(this.key,this.style,r)},t}(k),V={onCreateRule:function(e,t,r){return r.parent&&"keyframes"===r.parent.type?new q(e,t,r):null}},B=function(){function e(e,t,r){this.type="font-face",this.at="@font-face",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){var t=g(e).linebreak;if(Array.isArray(this.style)){for(var r="",n=0;n<this.style.length;n++)r+=b(this.at,this.style[n]),this.style[n+1]&&(r+=t);return r}return b(this.at,this.style,e)},e}(),G=/@font-face/,W={onCreateRule:function(e,t,r){return G.test(e)?new B(e,t,r):null}},F=function(){function e(e,t,r){this.type="viewport",this.at="@viewport",this.isProcessed=!1,this.key=e,this.style=t,this.options=r}return e.prototype.toString=function(e){return b(this.key,this.style,e)},e}(),H={onCreateRule:function(e,t,r){return"@viewport"===e||"@-ms-viewport"===e?new F(e,t,r):null}},J=function(){function e(e,t,r){this.type="simple",this.isProcessed=!1,this.key=e,this.value=t,this.options=r}return e.prototype.toString=function(e){if(Array.isArray(this.value)){for(var t="",r=0;r<this.value.length;r++)t+=this.key+" "+this.value[r]+";",this.value[r+1]&&(t+="\n");return t}return this.key+" "+this.value+";"},e}(),z={"@charset":!0,"@import":!0,"@namespace":!0},$=[P,E,D,V,W,H,{onCreateRule:function(e,t,r){return e in z?new J(e,t,r):null}}],K={process:!0},Y={force:!0,process:!0},X=function(){function e(e){this.map={},this.raw={},this.index=[],this.counter=0,this.options=e,this.classes=e.classes,this.keyframes=e.keyframes}var t=e.prototype;return t.add=function(e,t,r){var i=this.options,s=i.parent,o=i.sheet,a=i.jss,u=i.Renderer,l=i.generateId,c=i.scoped,h=Object(n.a)({classes:this.classes,parent:s,sheet:o,jss:a,Renderer:u,generateId:l,scoped:c,name:e,keyframes:this.keyframes,selector:void 0},r),d=e;e in this.raw&&(d=e+"-d"+this.counter++),this.raw[d]=t,d in this.classes&&(h.selector="."+x(this.classes[d]));var f=p(d,t,h);if(!f)return null;this.register(f);var y=void 0===h.index?this.index.length:h.index;return this.index.splice(y,0,f),f},t.replace=function(e,t,r){var i=this.get(e),s=this.index.indexOf(i);i&&this.remove(i);var o=r;return-1!==s&&(o=Object(n.a)({},r,{index:s})),this.add(e,t,o)},t.get=function(e){return this.map[e]},t.remove=function(e){this.unregister(e),delete this.raw[e.key],this.index.splice(this.index.indexOf(e),1)},t.indexOf=function(e){return this.index.indexOf(e)},t.process=function(){var e=this.options.jss.plugins;this.index.slice(0).forEach(e.onProcessRule,e)},t.register=function(e){this.map[e.key]=e,e instanceof O?(this.map[e.selector]=e,e.id&&(this.classes[e.key]=e.id)):e instanceof C&&this.keyframes&&(this.keyframes[e.name]=e.id)},t.unregister=function(e){delete this.map[e.key],e instanceof O?(delete this.map[e.selector],delete this.classes[e.key]):e instanceof C&&delete this.keyframes[e.name]},t.update=function(){var e,t,r;if("string"==typeof(arguments.length<=0?void 0:arguments[0])?(e=arguments.length<=0?void 0:arguments[0],t=arguments.length<=1?void 0:arguments[1],r=arguments.length<=2?void 0:arguments[2]):(t=arguments.length<=0?void 0:arguments[0],r=arguments.length<=1?void 0:arguments[1],e=null),e)this.updateOne(this.get(e),t,r);else for(var n=0;n<this.index.length;n++)this.updateOne(this.index[n],t,r)},t.updateOne=function(t,r,n){void 0===n&&(n=K);var i=this.options,s=i.jss.plugins,o=i.sheet;if(t.rules instanceof e)t.rules.update(r,n);else{var a=t.style;if(s.onUpdate(r,t,o,n),n.process&&a&&a!==t.style){for(var u in s.onProcessStyle(t.style,t,o),t.style){var l=t.style[u];l!==a[u]&&t.prop(u,l,Y)}for(var c in a){var h=t.style[c],d=a[c];null==h&&h!==d&&t.prop(c,null,Y)}}}},t.toString=function(e){for(var t="",r=this.options.sheet,n=!!r&&r.options.link,i=g(e).linebreak,s=0;s<this.index.length;s++){var o=this.index[s].toString(e);(o||n)&&(t&&(t+=i),t+=o)}return t},e}(),Q=function(){function e(e,t){for(var r in this.attached=!1,this.deployed=!1,this.classes={},this.keyframes={},this.options=Object(n.a)({},t,{sheet:this,parent:this,classes:this.classes,keyframes:this.keyframes}),t.Renderer&&(this.renderer=new t.Renderer(this)),this.rules=new X(this.options),e)this.rules.add(r,e[r]);this.rules.process()}var t=e.prototype;return t.attach=function(){return this.attached||(this.renderer&&this.renderer.attach(),this.attached=!0,this.deployed||this.deploy()),this},t.detach=function(){return this.attached?(this.renderer&&this.renderer.detach(),this.attached=!1,this):this},t.addRule=function(e,t,r){var n=this.queue;this.attached&&!n&&(this.queue=[]);var i=this.rules.add(e,t,r);return i?(this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(n?n.push(i):(this.insertRule(i),this.queue&&(this.queue.forEach(this.insertRule,this),this.queue=void 0)),i):i:(this.deployed=!1,i)):null},t.replaceRule=function(e,t,r){var n=this.rules.get(e);if(!n)return this.addRule(e,t,r);var i=this.rules.replace(e,t,r);return i&&this.options.jss.plugins.onProcessRule(i),this.attached?this.deployed?(this.renderer&&(i?n.renderable&&this.renderer.replaceRule(n.renderable,i):this.renderer.deleteRule(n)),i):i:(this.deployed=!1,i)},t.insertRule=function(e){this.renderer&&this.renderer.insertRule(e)},t.addRules=function(e,t){var r=[];for(var n in e){var i=this.addRule(n,e[n],t);i&&r.push(i)}return r},t.getRule=function(e){return this.rules.get(e)},t.deleteRule=function(e){var t="object"==typeof e?e:this.rules.get(e);return!(!t||this.attached&&!t.renderable)&&(this.rules.remove(t),!(this.attached&&t.renderable&&this.renderer)||this.renderer.deleteRule(t.renderable))},t.indexOf=function(e){return this.rules.indexOf(e)},t.deploy=function(){return this.renderer&&this.renderer.deploy(),this.deployed=!0,this},t.update=function(){var e;return(e=this.rules).update.apply(e,arguments),this},t.updateOne=function(e,t,r){return this.rules.updateOne(e,t,r),this},t.toString=function(e){return this.rules.toString(e)},e}(),Z=function(){function e(){this.plugins={internal:[],external:[]},this.registry={}}var t=e.prototype;return t.onCreateRule=function(e,t,r){for(var n=0;n<this.registry.onCreateRule.length;n++){var i=this.registry.onCreateRule[n](e,t,r);if(i)return i}return null},t.onProcessRule=function(e){if(!e.isProcessed){for(var t=e.options.sheet,r=0;r<this.registry.onProcessRule.length;r++)this.registry.onProcessRule[r](e,t);e.style&&this.onProcessStyle(e.style,e,t),e.isProcessed=!0}},t.onProcessStyle=function(e,t,r){for(var n=0;n<this.registry.onProcessStyle.length;n++)t.style=this.registry.onProcessStyle[n](t.style,t,r)},t.onProcessSheet=function(e){for(var t=0;t<this.registry.onProcessSheet.length;t++)this.registry.onProcessSheet[t](e)},t.onUpdate=function(e,t,r,n){for(var i=0;i<this.registry.onUpdate.length;i++)this.registry.onUpdate[i](e,t,r,n)},t.onChangeValue=function(e,t,r){for(var n=e,i=0;i<this.registry.onChangeValue.length;i++)n=this.registry.onChangeValue[i](n,t,r);return n},t.use=function(e,t){void 0===t&&(t={queue:"external"});var r=this.plugins[t.queue];-1===r.indexOf(e)&&(r.push(e),this.registry=[].concat(this.plugins.external,this.plugins.internal).reduce((function(e,t){for(var r in t)r in e&&e[r].push(t[r]);return e}),{onCreateRule:[],onProcessRule:[],onProcessStyle:[],onProcessSheet:[],onChangeValue:[],onUpdate:[]}))},e}(),ee=function(){function e(){this.registry=[]}var t=e.prototype;return t.add=function(e){var t=this.registry,r=e.options.index;if(-1===t.indexOf(e))if(0===t.length||r>=this.index)t.push(e);else for(var n=0;n<t.length;n++)if(t[n].options.index>r)return void t.splice(n,0,e)},t.reset=function(){this.registry=[]},t.remove=function(e){var t=this.registry.indexOf(e);this.registry.splice(t,1)},t.toString=function(e){for(var t=void 0===e?{}:e,r=t.attached,n=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(t,["attached"]),i=g(n).linebreak,s="",o=0;o<this.registry.length;o++){var a=this.registry[o];null!=r&&a.attached!==r||(s&&(s+=i),s+=a.toString(n))}return s},u(e,[{key:"index",get:function(){return 0===this.registry.length?0:this.registry[this.registry.length-1].options.index}}]),e}(),te=new ee,re="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window&&window.Math===Math?window:"undefined"!=typeof self&&self.Math===Math?self:Function("return this")(),ne="2f1acc6c3a606b082e5eef5e54414ffb";null==re[ne]&&(re[ne]=0);var ie=re[ne]++,se=function(e){void 0===e&&(e={});var t=0;return function(r,n){t+=1;var i="",s="";return n&&(n.options.classNamePrefix&&(s=n.options.classNamePrefix),null!=n.options.jss.id&&(i=String(n.options.jss.id))),e.minify?""+(s||"c")+ie+i+t:s+r.key+"-"+ie+(i?"-"+i:"")+"-"+t}},oe=function(e){var t;return function(){return t||(t=e()),t}},ae=function(e,t){try{return e.attributeStyleMap?e.attributeStyleMap.get(t):e.style.getPropertyValue(t)}catch(e){return""}},ue=function(e,t,r){try{var n=r;if(Array.isArray(r)&&(n=v(r)),e.attributeStyleMap)e.attributeStyleMap.set(t,n);else{var i=n?n.indexOf("!important"):-1,s=i>-1?n.substr(0,i-1):n;e.style.setProperty(t,s,i>-1?"important":"")}}catch(e){return!1}return!0},le=function(e,t){try{e.attributeStyleMap?e.attributeStyleMap.delete(t):e.style.removeProperty(t)}catch(e){}},ce=function(e,t){return e.selectorText=t,e.selectorText===t},he=oe((function(){return document.querySelector("head")}));function de(e){var t=te.registry;if(t.length>0){var r=function(e,t){for(var r=0;r<e.length;r++){var n=e[r];if(n.attached&&n.options.index>t.index&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e);if(r&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element};if((r=function(e,t){for(var r=e.length-1;r>=0;r--){var n=e[r];if(n.attached&&n.options.insertionPoint===t.insertionPoint)return n}return null}(t,e))&&r.renderer)return{parent:r.renderer.element.parentNode,node:r.renderer.element.nextSibling}}var n=e.insertionPoint;if(n&&"string"==typeof n){var i=function(e){for(var t=he(),r=0;r<t.childNodes.length;r++){var n=t.childNodes[r];if(8===n.nodeType&&n.nodeValue.trim()===e)return n}return null}(n);if(i)return{parent:i.parentNode,node:i.nextSibling}}return!1}var fe=oe((function(){var e=document.querySelector('meta[property="csp-nonce"]');return e?e.getAttribute("content"):null})),pe=function(e,t,r){try{"insertRule"in e?e.insertRule(t,r):"appendRule"in e&&e.appendRule(t)}catch(e){return!1}return e.cssRules[r]},ye=function(e,t){var r=e.cssRules.length;return void 0===t||t>r?r:t},ve=function(){function e(e){this.getPropertyValue=ae,this.setProperty=ue,this.removeProperty=le,this.setSelector=ce,this.hasInsertedRules=!1,this.cssRules=[],e&&te.add(e),this.sheet=e;var t,r=this.sheet?this.sheet.options:{},n=r.media,i=r.meta,s=r.element;this.element=s||((t=document.createElement("style")).textContent="\n",t),this.element.setAttribute("data-jss",""),n&&this.element.setAttribute("media",n),i&&this.element.setAttribute("data-meta",i);var o=fe();o&&this.element.setAttribute("nonce",o)}var t=e.prototype;return t.attach=function(){if(!this.element.parentNode&&this.sheet){!function(e,t){var r=t.insertionPoint,n=de(t);if(!1!==n&&n.parent)n.parent.insertBefore(e,n.node);else if(r&&"number"==typeof r.nodeType){var i=r,s=i.parentNode;s&&s.insertBefore(e,i.nextSibling)}else he().appendChild(e)}(this.element,this.sheet.options);var e=Boolean(this.sheet&&this.sheet.deployed);this.hasInsertedRules&&e&&(this.hasInsertedRules=!1,this.deploy())}},t.detach=function(){if(this.sheet){var e=this.element.parentNode;e&&e.removeChild(this.element),this.sheet.options.link&&(this.cssRules=[],this.element.textContent="\n")}},t.deploy=function(){var e=this.sheet;e&&(e.options.link?this.insertRules(e.rules):this.element.textContent="\n"+e.toString()+"\n")},t.insertRules=function(e,t){for(var r=0;r<e.index.length;r++)this.insertRule(e.index[r],r,t)},t.insertRule=function(e,t,r){if(void 0===r&&(r=this.element.sheet),e.rules){var n=e,i=r;if("conditional"===e.type||"keyframes"===e.type){var s=ye(r,t);if(!1===(i=pe(r,n.toString({children:!1}),s)))return!1;this.refCssRule(e,s,i)}return this.insertRules(n.rules,i),i}var o=e.toString();if(!o)return!1;var a=ye(r,t),u=pe(r,o,a);return!1!==u&&(this.hasInsertedRules=!0,this.refCssRule(e,a,u),u)},t.refCssRule=function(e,t,r){e.renderable=r,e.options.parent instanceof Q&&this.cssRules.splice(t,0,r)},t.deleteRule=function(e){var t=this.element.sheet,r=this.indexOf(e);return-1!==r&&(t.deleteRule(r),this.cssRules.splice(r,1),!0)},t.indexOf=function(e){return this.cssRules.indexOf(e)},t.replaceRule=function(e,t){var r=this.indexOf(e);return-1!==r&&(this.element.sheet.deleteRule(r),this.cssRules.splice(r,1),this.insertRule(t,r))},t.getRules=function(){return this.element.sheet.cssRules},e}(),ge=0,me=function(){function e(e){this.id=ge++,this.version="10.9.2",this.plugins=new Z,this.options={id:{minify:!1},createGenerateId:se,Renderer:s?ve:null,plugins:[]},this.generateId=se({minify:!1});for(var t=0;t<$.length;t++)this.plugins.use($[t],{queue:"internal"});this.setup(e)}var t=e.prototype;return t.setup=function(e){return void 0===e&&(e={}),e.createGenerateId&&(this.options.createGenerateId=e.createGenerateId),e.id&&(this.options.id=Object(n.a)({},this.options.id,e.id)),(e.createGenerateId||e.id)&&(this.generateId=this.options.createGenerateId(this.options.id)),null!=e.insertionPoint&&(this.options.insertionPoint=e.insertionPoint),"Renderer"in e&&(this.options.Renderer=e.Renderer),e.plugins&&this.use.apply(this,e.plugins),this},t.createStyleSheet=function(e,t){void 0===t&&(t={});var r=t.index;"number"!=typeof r&&(r=0===te.index?0:te.index+1);var i=new Q(e,Object(n.a)({},t,{jss:this,generateId:t.generateId||this.generateId,insertionPoint:this.options.insertionPoint,Renderer:this.options.Renderer,index:r}));return this.plugins.onProcessSheet(i),i},t.removeStyleSheet=function(e){return e.detach(),te.remove(e),this},t.createRule=function(e,t,r){if(void 0===t&&(t={}),void 0===r&&(r={}),"object"==typeof e)return this.createRule(void 0,e,t);var i=Object(n.a)({},r,{name:e,jss:this,Renderer:this.options.Renderer});i.generateId||(i.generateId=this.generateId),i.classes||(i.classes={}),i.keyframes||(i.keyframes={});var s=p(e,t,i);return s&&this.plugins.onProcessRule(s),s},t.use=function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.forEach((function(t){e.plugins.use(t)})),this},e}(),be=function(e){return new me(e)},Se=function(){function e(){this.length=0,this.sheets=new WeakMap}var t=e.prototype;return t.get=function(e){var t=this.sheets.get(e);return t&&t.sheet},t.add=function(e,t){this.sheets.has(e)||(this.length++,this.sheets.set(e,{sheet:t,refs:0}))},t.manage=function(e){var t=this.sheets.get(e);if(t)return 0===t.refs&&t.sheet.attach(),t.refs++,t.sheet;Object(o.a)(!1,"[JSS] SheetsManager: can't find sheet to manage")},t.unmanage=function(e){var t=this.sheets.get(e);t?t.refs>0&&(t.refs--,0===t.refs&&t.sheet.detach()):Object(o.a)(!1,"SheetsManager: can't find sheet to unmanage")},u(e,[{key:"size",get:function(){return this.length}}]),e}(),Re="object"==typeof CSS&&null!=CSS&&"number"in CSS;function xe(e){var t=null;for(var r in e){var n=e[r],i=typeof n;if("function"===i)t||(t={}),t[r]=n;else if("object"===i&&null!==n&&!Array.isArray(n)){var s=xe(n);s&&(t||(t={}),t[r]=s)}}return t}
/**
 * A better abstraction over CSS.
 *
 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
 * @website https://github.com/cssinjs/jss
 * @license MIT
 */var ke=be();t.default=ke},70:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UppyLoader=t.Explorer=void 0;const i=n(r(5)),s=n(r(9)),o=r(71),a=r(10),u=[{apiName:"playground",cdn:"https://cloud-storage-integration.playground.blackboardcdn.com"},{apiName:"dev",cdn:"https://cloud-storage-integration.dev.blackboardcdn.com"},{apiName:"default",cdn:"https://cloud-storage-integration.blackboardcdn.com"}];class l{constructor(e,t){this.iframe=e,this.backdrop=t,this.iframeHasLoaded=!1,this.subscribers={success:[],cancel:[],error:[],addAccount:[],deleteAccount:[]},window.addEventListener("message",r=>{if("cancel"===r.data.status){e.style.display="none",t.style.display="none";for(const e of this.subscribers.cancel)e.call(void 0)}if("success"===r.data.status){e.style.display="none",t.style.display="none";for(const e of this.subscribers.success)e.call(void 0,r.data.files)}}),this.iframe.addEventListener("load",()=>{this.iframeHasLoaded=!0})}postMessageToIframe(e,t){var r;const n={status:e.toString(),options:t};this.iframeHasLoaded?null===(r=this.iframe.contentWindow)||void 0===r||r.postMessage(n,this.iframe.src):this.iframe.addEventListener("load",()=>{var e;null===(e=this.iframe.contentWindow)||void 0===e||e.postMessage(n,this.iframe.src)})}update(e){this.postMessageToIframe(a.MessageStatus.options,e)}choose(){this.iframe.style.display="block",this.backdrop.style.display="block",this.postMessageToIframe(a.MessageStatus.open)}logout(){this.postMessageToIframe(a.MessageStatus.logout)}on(e,t){switch(e){case"success":this.subscribers.success.push(t);break;case"cancel":this.subscribers.cancel.push(t);break;case"error":this.subscribers.error.push(t);break;case"addAccount":this.subscribers.addAccount.push(t);break;case"deleteAccount":this.subscribers.deleteAccount.push(t);break;default:throw new Error("unknown event")}}}t.Explorer=l;class c{constructor(){var e;this.explorer=e=>{var t,r;const n=null!==(t=e.text_direction)&&void 0!==t?t:"ltr",i=document.createElement("iframe");i.id="cloud-storage-iframe-"+Math.floor(Math.random()*10**12),i.classList.add("kloudless-modal",this.iframeStyleSheet.classes.modal),i.classList.add("cloud-storage-integration-modal",this.iframeStyleSheet.classes.modal),i.setAttribute("title","explorer"),i.setAttribute("dir",n);const s=new URL(this.getExplorerUrl(e)+"/explorer/explorer.html");s.searchParams.append("origin",window.origin),s.searchParams.append("base_url",null!==(r=e.base_url)&&void 0!==r?r:""),s.searchParams.append("text_direction",n),!1===e.multiselect&&s.searchParams.append("allow_single_file","true"),e.show_dummy_provider&&s.searchParams.append("show_dummy_provider","true"),i.setAttribute("src",s.toString()),i.style.display="none",document.body.appendChild(i);return null===document.getElementById("cloud-storage-backdrop")&&document.body.appendChild(this.backdrop),new l(i,this.backdrop)},this.currentScriptUrl=null===(e=document.currentScript)||void 0===e?void 0:e.src,i.default.use((0,s.default)()),this.globalStyleSheet=i.default.createStyleSheet(o.globalStyle).attach(),this.iframeStyleSheet=i.default.createStyleSheet(o.iframeStyle,{classNamePrefix:"cloud-storage-integration-"}).attach(),this.backdropStyleSheet=i.default.createStyleSheet(o.backdropStyle,{classNamePrefix:"cloud-storage-integration-"}).attach(),this.backdrop=document.getElementById("cloud-storage-backdrop"),this.backdrop=document.createElement("div"),this.backdrop.id="cloud-storage-backdrop",this.backdrop.classList.add(this.backdropStyleSheet.classes.backdrop)}getExplorerUrl(e){var t,r,n;if(e.use_loader_explorer){const e=this.currentScriptUrl.split("/"),t=e.indexOf("loader");if(t>0){return e.slice(0,t).join("/")}console.error("uppy: ERROR: nonstandard currentScript url.  Cannot use loader explorer")}const i=null!==(t=null==e?void 0:e.base_url)&&void 0!==t?t:"";return null!==(n=null===(r=u.find(e=>i.indexOf(e.apiName)>0))||void 0===r?void 0:r.cdn)&&void 0!==n?n:u[u.length-1].cdn}authenticator(){}}t.UppyLoader=c,window.Kloudless=new c,window.CloudStorageIntegration=window.Kloudless},71:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.backdropStyle=t.iframeStyle=t.globalStyle=void 0,t.globalStyle={"@global":{}},t.iframeStyle={modal:{display:"block","box-sizing":"border-box",position:"fixed",top:"20%",left:"50%",width:"640px",height:"60vh",transform:"translateX(-50%)",border:"solid 0 #666","border-radius":"2px","box-shadow":"0 0 10px rgba(0,0,0,0.4)",transition:"all 0","-webkit-transition":"all 0","z-index":"9999","background-color":"#fafafa"},"@media only screen and (max-width:1024px), only screen and (max-height:768px), only screen and (max-device-width:1024px), only screen and (max-device-height:768px)":{modal:{height:"84vh",top:"8%"}},"@media only screen and (max-width:640px), only screen and (max-height:512px), only screen and (max-device-width:640px), only screen and (max-device-height:512px)":{modal:{width:"1px","min-width":"100%",height:"100%",top:"0",left:"0",transform:"none"}}},t.backdropStyle={backdrop:{position:"fixed",margin:"0",top:"0",left:"0",padding:"0",width:"100%",height:"100%",display:"none","background-color":"rgba(0,0,0,0.6)","z-index":"9998",opacity:".5"}}},9:function(e,t,r){"use strict";r.r(t);var n=r(1),i=r(5),s="@global",o=function(){function e(e,t,r){for(var o in this.type="global",this.at=s,this.isProcessed=!1,this.key=e,this.options=r,this.rules=new i.RuleList(Object(n.a)({},r,{parent:this})),t)this.rules.add(o,t[o]);this.rules.process()}var t=e.prototype;return t.getRule=function(e){return this.rules.get(e)},t.addRule=function(e,t,r){var n=this.rules.add(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.replaceRule=function(e,t,r){var n=this.rules.replace(e,t,r);return n&&this.options.jss.plugins.onProcessRule(n),n},t.indexOf=function(e){return this.rules.indexOf(e)},t.toString=function(e){return this.rules.toString(e)},e}(),a=function(){function e(e,t,r){this.type="global",this.at=s,this.isProcessed=!1,this.key=e,this.options=r;var i=e.substr("@global ".length);this.rule=r.jss.createRule(i,t,Object(n.a)({},r,{parent:this}))}return e.prototype.toString=function(e){return this.rule?this.rule.toString(e):""},e}(),u=/\s*,\s*/g;function l(e,t){for(var r=e.split(u),n="",i=0;i<r.length;i++)n+=t+" "+r[i].trim(),r[i+1]&&(n+=", ");return n}t.default=function(){return{onCreateRule:function(e,t,r){if(!e)return null;if(e===s)return new o(e,t,r);if("@"===e[0]&&"@global "===e.substr(0,"@global ".length))return new a(e,t,r);var n=r.parent;return n&&("global"===n.type||n.options.parent&&"global"===n.options.parent.type)&&(r.scoped=!1),r.selector||!1!==r.scoped||(r.selector=e),null},onProcessRule:function(e,t){"style"===e.type&&t&&(function(e,t){var r=e.options,i=e.style,o=i?i[s]:null;if(o){for(var a in o)t.addRule(a,o[a],Object(n.a)({},r,{selector:l(a,e.selector)}));delete i[s]}}(e,t),function(e,t){var r=e.options,i=e.style;for(var o in i)if("@"===o[0]&&o.substr(0,s.length)===s){var a=l(o.substr(s.length),e.selector);t.addRule(a,i[o],Object(n.a)({},r,{selector:a})),delete i[o]}}(e,t))}}}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,